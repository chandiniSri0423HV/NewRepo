pipeline
{
	agent any
	stages {
        stage('Generate Token') {
            steps {
                script{
                    def curlCommand = "curl -s \"${params.tokenURL}\" --header \"Authorization: ${params.authorizationHeader}\" --header \"Content-Type: application/x-www-form-urlencoded\" --data-urlencode \"grant_type=${params.grantType}\" --data-urlencode \"scope=${params.scope}\" --data-urlencode \"client_id=${params.clientId}\" --data-urlencode \"client_secret=${params.clientSecret}\" --insecure -o ${params.tokenOutputFile}"
                    bat(curlCommand)
                }
            }
        }
	}
}
--------------------------------------------------
stage('Deactivation of integration'){
            steps {
				script {
					def integName = params.Integration_Identifier.toString()
					def integURL = params.InstanceURL.toString()
					//def deActivationStatus = '{"status":"CONFIGURED"}'
					def deactivateIntegrationCmd = "curl --user ${params.Username}:${params.Password} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @${params.DetivationJsonFile} -d 'enableAsyncActivationMode=true' \"${integURL}/ic/api/integration/v1/integrations/${integName}\""
					bat(deactivateIntegrationCmd)
				}

            }
        }