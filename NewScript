pipeline
{
	agent any
	parameters {
        booleanParam(name: 'ActivateIntegration', defaultValue: false)
    }
	stages {
		stage('Deployement of a new Integration'){
			steps{
				script{
					def integURL=(params.InstanceURL).toString()+"/ic/api/integration/v1/integrations/archive"
					def deployIntegCmd = "curl --location \"${integURL}\" --silent --user ${params.Username}:${params.Password} --form \"file=@\\\"${params.IARFileName}\\\"\""
					bat(deployIntegCmd)
				}
			}
		}
		

        stage('Configuring a new connection'){
            steps {
				script{
					bat """
                    curl --user ${params.Username}:${params.Password} --header "X-HTTP-Method-Override:PATCH" --header "Content-Type:application/json" -d @${params.ConnectionFileName} ${params.InstanceURL}/ic/api/integration/v1/connections/${params.ConnectionName}
                    """
				}
			}
        }
		
		stage('Configuring a new lookup'){
			steps { 
				script{
					def configLookupCmd = "curl -X POST --user ${params.Username}:${params.Password} -F \"file=@${params.LookupFileName}\" -F \"type=application/octet-stream\" ${params.InstanceURL}/ic/api/integration/v1/lookups/archive"
					bat(configLookupCmd)
				}
			}
		}
		
		
		stage('Activation of the integration'){
			steps { 
				script {
					def integName = params.Integration_Identifier.toString()
					
					if (params.ActivateIntegration) {
                        // Perform action when the checkbox is checked
                        echo 'Checkbox is checked'
						def activateIntegrationCmd = "curl --user ${params.Username}:${params.Password} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @${params.ActivationJsonFile} --location \"${params.InstanceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(activateIntegrationCmd)
                    } else {
                        // Perform a different action when the checkbox is not checked
                        echo 'Checkbox is not checked'
                        // Add your desired logic here
                        def integURL = params.InstanceURL.toString()
						def deactivateIntegrationCmd = "curl --user ${params.Username}:${params.Password} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @${params.DeactivationJsonFile} -d 'enableAsyncActivationMode=true' \"${integURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateIntegrationCmd)
                        echo "Integration Configured"
                    }
				}
			}
		}
    }
}